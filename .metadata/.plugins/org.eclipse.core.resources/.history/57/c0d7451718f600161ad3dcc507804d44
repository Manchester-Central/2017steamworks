package org.usfirst.frc.team131.robot;

public class AutoController {
	
	private enum State {
		INITIAL, DO_NOTHING, DRIVE_FORWARD, DRIVE_BACKWARD, PLACE_GEAR, TURN, DRIVE_FORWARD_TWO, TURN_TWO
	}
	
	State state = State.INITIAL;
	
	//Drives Straight
	public void driveStraight (DriveBase drive, double distance) 
	{
		switch (state) 
		{
			case INITIAL:
				state = State.DRIVE_FORWARD;
				break;
			case DRIVE_FORWARD:
				drive.driveStraightDistance(distance);
				if (drive.getLeftWheelDistance() >= distance) 
				{
					state = State.DO_NOTHING;
				}
				break;
			case DO_NOTHING:
			default:
				drive.setSpeed(0.0, 0.0);
				break;
			
		}
	}
	
	// Drives(backwards) and Places Gear 
	public void placeGear (DriveBase drive, GearFlopper gearFlopper, SensorController sensor, double distanceOffset, double distanceCanOffset)
	{
		switch (state)
		{
			case INITIAL:
				state = State.TURN;
				break;
			case TURN:
				if (Math.abs(distanceOffset) > distanceCanOffset) {
					if (distanceOffset < 0) {
						drive.turnLeft(0.5);
					} else {
						drive.turnRight(0.5);
					}
				} else {
					state = state.DRIVE_FORWARD_TWO;
				}
				break;
			case DRIVE_FORWARD:
				
				if (gearFlopper.springActivated())
				{
					state = State.PLACE_GEAR;
				}
				break;
			case PLACE_GEAR:
				if (gearFlopper.gearIsPresent() == false) 
				{
					gearFlopper.retractGearFlopper(2000L);
					state = State.DO_NOTHING;
				}
				else 
				{
					gearFlopper.ejectGear(2000L);
				}
			case DO_NOTHING:
			default:
				drive.setSpeed(0.0, 0.0);
				gearFlopper.retractGearFlopper(2000L);

		}
	}
	
}
